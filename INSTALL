This document contains installation instructions for Domesday on Ubuntu. 
Application to other systems is currently an exercise for the reader :-)

Domesday currently has no access control, and also these setup instructions are currently designed for a secure, test environment. Do not deploy the 
resulting system anywhere Internet-facing!

1) Install necessary libraries

    sudo apt-get install libmysqlclient-dev python-pip python-jinja2 python-mysqldb python-dev libsasl2-dev libldap2-dev libssl-dev mysql-server subversion

2) Get a copy of Domesday

    git clone --recursive git://github.com/mozilla/domesday.git phonebook

(Apparently things will go wrong if you call the directory you keep it in
'domesday' as well, so it is called 'phonebook' above.)

3) Install requirements

    cd phonebook
    sudo pip install -r requirements/compiled.txt

4) Install a directory
The directory depends on Berkley DB utils, such as db4.2-util in Ubuntu 9.04 or db4.7-util in 10.04. This command should add that dependency automagically.

    sudo apt-get install slapd ldap-utils 

The command 

    ps aux | grep slap

should show the directory running. If not, start it.

5) Install schema files

    sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/cosine.ldif
    sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/nis.ldif
    sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/inetorgperson.ldif

    sudo ldapadd -Y EXTERNAL -H ldapi:/// -f directory/domesday-schema.ldif

6) Set up directory structure and root DN access for Mozillians

    sudo ldapadd -Y EXTERNAL -H ldapi:/// -f directory/mozillians-config.ldif

7) Put test Mozillians data in directory

    cp directory/images/* /tmp
    sudo ldapadd -x -D cn=admin,dc=mozillians,dc=org -W -f directory/mozillians-data.ldif

You will be asked for a password; it's the one in mozillians-config.ldif, which is "secret".

If this fails part-way through for any reason, you need the "-c" option when you re-run it.

8) Install a directory viewer (Apache Directory Studio)

Visit http://directory.apache.org/studio/download/download-linux.html and download the (100MB!) Apache Directory Studio. Unzip the tarball and run the file (requires Java).

Click "go to the workbench".
Click "New Connection" in the Connections window in the bottom left
Name: data
Hostname: localhost
<Next>
Bind DN or user: cn=admin,dc=mozillians,dc=org
Bind password: secret
Click "Finish"

Double-click on the resulting connection and you should see the test data.

The refresh button is F5.

9) Hack settings_local.py

Copy settings_local.py-dist to settings_local.py
Fill in the LDAP details if necessary (if your directory is local and you are using the supplied LDIF, it should be the same). Fill in an absolute path to the SQLite file you are going to use.

10) Run syncdb

    ./manage.py syncdb

It will ask you for superuser auth details. Enter something sensible (this
isn't used by us AFAIK).

11) Add some service definitions

XXX Copy in a test SQLite database? Or import some sort of dump? These aren't
required for testing but it makes the UI look and work better...

12) Start the test server

    ./manage.py runserver

13) See data

Visit http://localhost:8000/ and search for "gerv".

Starting Again
--------------

If you mess the directory up, you can remove the data (only) as follows:

    sudo /etc/init.d/slapd stop
    sudo rm -rf /var/lib/ldap/*
    sudo /etc/init.d/slapd start

Then do the "install test data" step again.

The config is in /etc/ldap/slapd.d/ but I've not looked at whether it's safe 
to just nuke it.

Open Questions
--------------

- What about virtualenvs?

